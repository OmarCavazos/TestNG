<?xml version="1.0" encoding="UTF-8"?>
<testng-results total="10" passed="9" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-05-19T20:15:28Z" name="Loan Department" finished-at="2025-05-19T20:15:28Z" duration-ms="115">
    <groups>
      <group name="Smoke">
        <method signature="Day2.ploan()[pri:0, instance:test.Day2@31ff43be]" name="ploan" class="test.Day2"/>
        <method signature="Day4.MobileLoginHomeLoan()[pri:0, instance:test.Day4@5c44c582]" name="MobileLoginHomeLoan" class="test.Day4"/>
        <method signature="Day3.WebloginCarLoan(java.lang.String, java.lang.String)[pri:0, instance:test.Day3@141e5bef]" name="WebloginCarLoan" class="test.Day3"/>
      </group> <!-- Smoke -->
    </groups>
    <test started-at="2025-05-19T20:15:28Z" name="Personal Loan" finished-at="2025-05-19T20:15:28Z" duration-ms="41">
      <class name="test.Day1">
        <test-method signature="demo()[pri:0, instance:test.Day1@5b6ec132]" started-at="2025-05-19T14:15:28Z" name="demo" finished-at="2025-05-19T14:15:28Z" duration-ms="12" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:513)
	at org.testng.Assert.assertTrue(Assert.java:42)
	at org.testng.Assert.assertTrue(Assert.java:52)
	at test.Day1.demo(Day1.java:17)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.access$000(SuiteRunner.java:39)
	at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:400)
	at org.testng.internal.thread.ThreadUtil$2.call(ThreadUtil.java:64)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- demo -->
        <test-method is-config="true" signature="lastExecution()[pri:0, instance:test.Day1@5b6ec132]" started-at="2025-05-19T14:15:28Z" name="lastExecution" finished-at="2025-05-19T14:15:28Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- lastExecution -->
      </class> <!-- test.Day1 -->
      <class name="test.Day2">
        <test-method is-config="true" signature="prerequisite()[pri:0, instance:test.Day2@31ff43be]" started-at="2025-05-19T14:15:28Z" name="prerequisite" finished-at="2025-05-19T14:15:28Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- prerequisite -->
        <test-method signature="ploan()[pri:0, instance:test.Day2@31ff43be]" started-at="2025-05-19T14:15:28Z" name="ploan" finished-at="2025-05-19T14:15:28Z" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ploan -->
      </class> <!-- test.Day2 -->
      <class name="test.Day4">
        <test-method signature="LoginAPIHomeLoan()[pri:0, instance:test.Day4@5c44c582]" started-at="2025-05-19T14:15:28Z" name="LoginAPIHomeLoan" finished-at="2025-05-19T14:15:28Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- LoginAPIHomeLoan -->
        <test-method signature="MobileLoginHomeLoan()[pri:0, instance:test.Day4@5c44c582]" started-at="2025-05-19T14:15:28Z" name="MobileLoginHomeLoan" finished-at="2025-05-19T14:15:28Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MobileLoginHomeLoan -->
        <test-method signature="WebloginHomeLoan(java.lang.String)[pri:0, instance:test.Day4@5c44c582]" started-at="2025-05-19T14:15:28Z" name="WebloginHomeLoan" finished-at="2025-05-19T14:15:28Z" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[personalloan.com]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- WebloginHomeLoan -->
      </class> <!-- test.Day4 -->
    </test> <!-- Personal Loan -->
    <test started-at="2025-05-19T20:15:28Z" name="Car Loan" finished-at="2025-05-19T20:15:28Z" duration-ms="21">
      <class name="test.Day3">
        <test-method is-config="true" signature="BfSuite()[pri:0, instance:test.Day3@141e5bef]" started-at="2025-05-19T14:15:28Z" name="BfSuite" finished-at="2025-05-19T14:15:28Z" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BfSuite -->
        <test-method is-config="true" signature="befoclas()[pri:0, instance:test.Day3@141e5bef]" started-at="2025-05-19T14:15:28Z" name="befoclas" finished-at="2025-05-19T14:15:28Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- befoclas -->
        <test-method is-config="true" signature="BfEvery()[pri:0, instance:test.Day3@141e5bef]" started-at="2025-05-19T14:15:28Z" name="BfEvery" finished-at="2025-05-19T14:15:28Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BfEvery -->
        <test-method signature="MobileLoginCarLoan()[pri:0, instance:test.Day3@141e5bef]" started-at="2025-05-19T14:15:28Z" name="MobileLoginCarLoan" finished-at="2025-05-19T14:15:28Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MobileLoginCarLoan -->
        <test-method is-config="true" signature="AfterEvery()[pri:0, instance:test.Day3@141e5bef]" started-at="2025-05-19T14:15:28Z" name="AfterEvery" finished-at="2025-05-19T14:15:28Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterEvery -->
        <test-method signature="MobileSignOutCarLoan(java.lang.String, java.lang.String)[pri:0, instance:test.Day3@141e5bef]" started-at="2025-05-19T14:15:28Z" name="MobileSignOutCarLoan" data-provider="getData" finished-at="2025-05-19T14:15:28Z" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[firstUserName]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[firstPassword]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MobileSignOutCarLoan -->
        <test-method is-config="true" signature="BfEvery()[pri:0, instance:test.Day3@141e5bef]" started-at="2025-05-19T14:15:28Z" name="BfEvery" finished-at="2025-05-19T14:15:28Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BfEvery -->
        <test-method is-config="true" signature="AfterEvery()[pri:0, instance:test.Day3@141e5bef]" started-at="2025-05-19T14:15:28Z" name="AfterEvery" finished-at="2025-05-19T14:15:28Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterEvery -->
        <test-method is-config="true" signature="BfEvery()[pri:0, instance:test.Day3@141e5bef]" started-at="2025-05-19T14:15:28Z" name="BfEvery" finished-at="2025-05-19T14:15:28Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BfEvery -->
        <test-method signature="MobileSignOutCarLoan(java.lang.String, java.lang.String)[pri:0, instance:test.Day3@141e5bef]" started-at="2025-05-19T14:15:28Z" name="MobileSignOutCarLoan" data-provider="getData" finished-at="2025-05-19T14:15:28Z" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[secondUserName]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[secondPassword]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MobileSignOutCarLoan -->
        <test-method is-config="true" signature="BfEvery()[pri:0, instance:test.Day3@141e5bef]" started-at="2025-05-19T14:15:28Z" name="BfEvery" finished-at="2025-05-19T14:15:28Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BfEvery -->
        <test-method is-config="true" signature="AfterEvery()[pri:0, instance:test.Day3@141e5bef]" started-at="2025-05-19T14:15:28Z" name="AfterEvery" finished-at="2025-05-19T14:15:28Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterEvery -->
        <test-method signature="MobileSignOutCarLoan(java.lang.String, java.lang.String)[pri:0, instance:test.Day3@141e5bef]" started-at="2025-05-19T14:15:28Z" name="MobileSignOutCarLoan" data-provider="getData" finished-at="2025-05-19T14:15:28Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[thirdUserName]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[thirdPassword]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MobileSignOutCarLoan -->
        <test-method is-config="true" signature="AfterEvery()[pri:0, instance:test.Day3@141e5bef]" started-at="2025-05-19T14:15:28Z" name="AfterEvery" finished-at="2025-05-19T14:15:28Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterEvery -->
        <test-method signature="WebloginCarLoan(java.lang.String, java.lang.String)[pri:0, instance:test.Day3@141e5bef]" started-at="2025-05-19T14:15:28Z" name="WebloginCarLoan" finished-at="2025-05-19T14:15:28Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[carloan.com]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[123456]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- WebloginCarLoan -->
        <test-method is-config="true" signature="BfEvery()[pri:0, instance:test.Day3@141e5bef]" started-at="2025-05-19T14:15:28Z" name="BfEvery" finished-at="2025-05-19T14:15:28Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BfEvery -->
        <test-method is-config="true" signature="AfterEvery()[pri:0, instance:test.Day3@141e5bef]" started-at="2025-05-19T14:15:28Z" name="AfterEvery" finished-at="2025-05-19T14:15:28Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterEvery -->
        <test-method is-config="true" signature="afclass()[pri:0, instance:test.Day3@141e5bef]" started-at="2025-05-19T14:15:28Z" name="afclass" finished-at="2025-05-19T14:15:28Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afclass -->
        <test-method is-config="true" signature="AfSuite()[pri:0, instance:test.Day3@141e5bef]" started-at="2025-05-19T14:15:28Z" name="AfSuite" finished-at="2025-05-19T14:15:28Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfSuite -->
      </class> <!-- test.Day3 -->
    </test> <!-- Car Loan -->
  </suite> <!-- Loan Department -->
</testng-results>
